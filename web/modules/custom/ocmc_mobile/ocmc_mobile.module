<?php

/**
 * @file
 * Contains ocmc_mobile.module.
 */

use Drupal\field\FieldConfigInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_help().
 */
function ocmc_mobile_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.ocmc_mobile':
      $text = file_get_contents(dirname(__FILE__) . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . $text . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}

/**
 * Implements hook_form_ID_alter().
 */
function ocmc_mobile_form_views_bulk_operations_configure_action_alter(&$form, &$form_state, $form_id) {
  if (isset($form['push_notification_link'])) {
    // Change link field from a url to an entity autocomplete to allow user
    // to select content to link to.
    $form['push_notification_link']['#type'] = 'entity_autocomplete';
    $form['push_notification_link']['#target_type'] = 'node';
    $form['push_notification_link']['#attributes']['data-autocomplete-first-character-blacklist'] = '/#?';
    $form['push_notification_link']['#description'] = t('Start typing the title of a piece of content to select it. You can also enter an internal path such as %add-node or an external URL such as %url. Enter %front to link to the front page. Enter %nolink to display link text only.');
    $form['push_notification_link']['#link_type'] = 17;
    $form['push_notification_link']['#element_validate'][] = [
      'Drupal\link\Plugin\Field\FieldWidget\LinkWidget',
      'validateUriElement',
    ];
    // Validate to check if the url or entity is valid.
    $form['#validate'][] = 'ocmc_vbo_push_notification_link_validate';
  }
}

/**
 * Custom validation function to check and set the link url from the node's
 * path alias.
 */
function ocmc_vbo_push_notification_link_validate(&$form, &$form_state) {
  $value = $form_state->getValue('push_notification_link');
  // If a node entity is used, get node id.
  // When a node entity is used, the value follows this pattern:
  // entity:node/{nid}
  $start_string = 'entity:node';
  if (substr($value, 0, strlen($start_string)) === $start_string) {
    $value_parts = explode('/', $value);
    $nid = $value_parts[1];
    if ($nid && is_numeric($nid)) {
      $host = \Drupal::request()->getSchemeAndHttpHost();
      $url = $host . \Drupal::service('path.alias_manager')->getAliasByPath('/node/'. $nid);
      $form_state->setValue('push_notification_link', $url);
      return true;
    }
    else {
      return false;
    }
  }
}

  /**
 * Implements hook_form_ID_alter().
 */
function ocmc_mobile_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] === 'views-exposed-form-ocmc-push-notification-mobile-devices-push-notification-page') {
    $form['field_subscribed_missionaries']['#size'] = 9;
    $form['field_subscribed_mission_team']['#size'] = 9;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function ocmc_mobile_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($display_id === 'push_notification_page') {
    $filters = $view->display_handler->getOption('filters');
    if (!empty($filters)) {
      $ocmc_content_filters = [
        'missionary' => 'field_subscribed_ocmc_content_target_id',
        'missionary_team' => 'field_subscribed_ocmc_content_target_id_1',
      ];
      foreach ($ocmc_content_filters as $ocmc_content_key => $content_filter) {
        if (isset($filters[$content_filter])) {
          foreach ($filters[$content_filter]['value'] as $key => $filter) {
            unset($filters[$content_filter]['value'][$key]);
          }
          $filters[$content_filter]['operator'] = 'in';
          $filters[$content_filter]['group_info']['group_items'] = _ocmc_mission_get_views_exposed_filters_options_of_missionaries($ocmc_content_key);
          $filters[$content_filter]['group_info']['multiple'] = TRUE;
          unset($filters[$content_filter]['expose']['placeholder']);
          unset($filters[$content_filter]['expose']['min_placeholder']);
          unset($filters[$content_filter]['expose']['max_placeholder']);
        }
      }
      $view->display_handler->overrideOption('filters', $filters);
    }
  }
}

