<?php
/**
 * @file ocmc_mission.module
 */

/**
 * Implements hook_page_attachments_alter().
 *
 * Note: If metatag auto trimming ever gets implemented for D8,
 * remove this hook implementation.
 * Source: https://www.drupal.org/project/metatag/issues/2958193
 */
function ocmc_mission_page_attachments_alter(array &$attachments) {
  // Trim all meta tags to a max of 300 characters.
  if (!empty($attachments['#attached']['html_head'])) {
    // Adjust this as needed.
    $max_length = 300;
    foreach ($attachments['#attached']['html_head'] as &$tag) {
      // Only process meta tags with a 'content' attribute, that way it will
      // exclude LINK tags or meta tags which do not have a "content" value.
      if (isset($tag[0]['#tag']) && $tag[0]['#tag'] == 'meta') {
        if ((!isset($tag[0]['#attributes']['schema_metatag']) || (isset($tag[0]['#attributes']['schema_metatag']) && !$tag[0]['#attributes']['schema_metatag'])) && isset($tag[0]['#attributes']['content'])) {
          if (!is_string($tag[0]['#attributes']['content'])) {
            $tag[0]['#attributes']['content'] = (string) $tag[0]['#attributes']['content'];
          }
          if (strlen($tag[0]['#attributes']['content']) > $max_length) {
            // Trim the string three characters shorter than the max so that
            // there is room for the elipses.
            $string = wordwrap($tag[0]['#attributes']['content'], ($max_length - 3));
            $string = explode("\n", $string);
            $tag[0]['#attributes']['content'] = $string[0] . '...';
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ocmc_mission_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'missionary_missionary_form':
    case 'missionary_missionary_edit_form':
    case 'missionary_missionary_team_form':
    case 'missionary_missionary_team_edit_form':
    case 'missionary_mission_priest_country_form':
    case 'missionary_mission_priest_country_edit_form':
      // Geolocation field provides a great interface to use leaflet
      // to add location data to an entity, but the leaflet map view
      // requires geofield data. The following uses a custom submit
      // handler to prefill the geofield data with the data from the
      // geolocation field.

      // Add a new submit handler to populate the geofield data with
      // the data from the geo location field.
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          array_unshift($form['actions'][$action]['#submit'], 'ocmc_mission_update_geofield_form_submit');
        }
      }

      // Hide/Disable geofield so that the user doesn't get confused
      // between this field and the geo location field.
      $form['field_geofield']['#access'] = false;
      $form['field_geofield']['#type'] = 'hidden';
      break;

    default:
      break;

  }
}

/**
 * Custom form submit handler.
 * @see ocmc_mission_form_missionary_missionary_edit_form_alter().
 */
function ocmc_mission_update_geofield_form_submit($form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Get field values from the geolocation field.
  $geolocation_value = $form_state->getValue('field_geo_location');
  // Get the array structure from the target field.
  $geofield_value = $form_state->getValue('field_geofield');

  // Prepare the latitude and longitude values for the geofield
  // value array with the values from geolocation field.
  $geofield_value[0]['value']['lat'] = $geolocation_value[0]['lat'];
  $geofield_value[0]['value']['lon'] = $geolocation_value[0]['lng'];

  // Set the value array for geofield.
  $form_state->setValue('field_geofield', $geofield_value);
}

/**
 * Implements hook_leaflet_map_info().
 */
function ocmc_mission_leaflet_map_info_alter(&$map_info) {
  $current_path = \Drupal::service('path.current')->getPath();
  // Homepage and Mission Priests page.
  if ($current_path === '/node/1' || $current_path === '/node/14') {
    $map_info['OSM Mapnik']['settings']['dragging'] = FALSE;
    $map_info['OSM Mapnik']['settings']['touchZoom'] = FALSE;
    $map_info['OSM Mapnik']['settings']['zoomControl'] = FALSE;
  }
}

/**
 * Implements template_preprocess_page().
 */
function ocmc_mission_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'ocmc_mission/ocmc-mission-disable-number-input-scrolling';
}
